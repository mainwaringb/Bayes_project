jags_out.preBin <-  coda.samples(model = jags_reg.preBin, variable.names = c("Beta0", "Beta[1]", "Beta[2]"), n.iter = 5000)
plot(jags_out.preBin) #looks generally converged, but a bit lumpy
gelman.plot(jags_out.preBin) #seems good after about 3000 iterations
autocorr.plot(jags_out.preBin) #strong autocorrelation
rm(list = ls())
library(foreign)
library(rstudioapi)
library(rjags)
setwd(dirname(dirname(getActiveDocumentContext()$path)))
preSurvey <- read.spss("Data/Pre-Election - Processed.sav", to.data.frame = TRUE)
postSurvey <- read.spss("Data/Post-Election - Processed.sav", to.data.frame = TRUE)
source("Scripts/makeJagsData.R")
#load("3 - Linear Regression.RData")
library(Matrix)
test <- nearPD((var(jags_dfout.preLin) * 1.5) )
load("3 - Linear Regression.RData")
library(Matrix)
test <- nearPD((var(jags_dfout.preLin) * 1.5) )
test
test$mat
(var(jags_dfout.preLin) * 1.5)
test <- nearPD(1 /(var(jags_dfout.preLin) * 1.5))
test$mat
1 /(var(jags_dfout.preLin) * 1.5)
PDMatrix <- Matrix::nearPD(1 /(var(jags_dfout.preLin) * 1.5))
jags_data.postCor$B_var <- PDMatrix$mat
jags_data.postCor$J <- NULL #Since we define the distribution of variables via a multivariate normal rather than a for loop, we don't need J (the count of variables)
jags_reg.postCor <- jags.model(file = "JAGS Models/lin_cor.bugs", data = jags_data.postCor, n.chains = 5)
jags_data.postCor <- makeJagsData(df = postSurvey.valid,  ivs = c("leftright_self", "q74d_recode"), dv = "Fav_AfD", addConstant = TRUE)
jags_data.postCor$B_mean <- jags_summary.preLin$statistics[,"Mean"]
#jags_data.postCor$B_var <- 1 /  (var(jags_dfout.preLin) * 1.5) #Matrix isn't positive definite
PDMatrix <- Matrix::nearPD(1 /(var(jags_dfout.preLin) * 1.5))
jags_data.postCor$B_var <- PDMatrix$mat
jags_data.postCor$J <- NULL #Since we define the distribution of variables via a multivariate normal rather than a for loop, we don't need J (the count of variables)
#The rest doesn't work
# #--Inspect intiial run--
jags_reg.postCor <- jags.model(file = "JAGS Models/lin_cor.bugs", data = jags_data.postCor, n.chains = 5)
jags_data.postCor$B_var
1 /  (var(jags_dfout.preLin) * 1.5)
class( jags_data.postCor$B_var)
jags_data.postCor$B_var <- 1 /  (var(jags_dfout.preLin) * 1.5) #Matrix isn't positive definite
jags_data.postCor
jags_data.postCor$B_var
PDMatrix$mat
class(jags_data.postCor$B_var
)
class( PDMatrix$mat)
help(nearPD)
PDMatrix <- Matrix::nearPD(1 /(var(jags_dfout.preLin) * 1.5), only.values = TRUE)
PDMatrix
PDMatrix <- Matrix::nearPD(1 /(var(jags_dfout.preLin) * 1.5), keepDiag = TRUE)
class( PDMatrix$mat) <- NULL
class( PDMatrix$mat) <- "matrix"
PDMatrix <- Matrix::nearPD(1 /(var(jags_dfout.preLin) * 1.5))$mat
class(PDMatrix)
class(PDMatrix) <- "Matrix"
jags_data.postCor$B_var <- PDMatrix
jags_reg.postCor <- jags.model(file = "JAGS Models/lin_cor.bugs", data = jags_data.postCor, n.chains = 5)
jags_data.postCor$B_var
PDMatrix <- Matrix::nearPD(1 /(var(jags_dfout.preLin) * 1.5))$mat
PDMatrix
as.matrix(PDMatrix )
jags_data.postCor <- makeJagsData(df = postSurvey.valid,  ivs = c("leftright_self", "q74d_recode"), dv = "Fav_AfD", addConstant = TRUE)
jags_data.postCor$B_mean <- jags_summary.preLin$statistics[,"Mean"]
jags_data.postCor$B_var <- 1 /  (var(jags_dfout.preLin) * 1.5) #Matrix isn't positive definite
PDMatrix <- Matrix::nearPD(1 /(var(jags_dfout.preLin) * 1.5))$mat
jags_data.postCor$B_var <- as.matrix(PDMatrix)
jags_data.postCor$J <- NULL #Since we define the distribution of variables via a multivariate normal rather than a for loop, we don't need J (the count of variables)
jags_reg.postCor <- jags.model(file = "JAGS Models/lin_cor.bugs", data = jags_data.postCor, n.chains = 5)
PDMatrix <- Matrix::nearPD(1 /(var(jags_dfout.preLin) * 1.5), keepDiag = TRUE, maxit = 5000)$mat
PDMatrix
1 /  (var(jags_dfout.preLin) * 1.5)
PDMatrix <- Matrix::nearPD(1 /(var(jags_dfout.preLin) * 1.5), keepDiag = TRUE, maxit = 50000)$mat
PDMatrix
jags_data.postCor <- makeJagsData(df = postSurvey.valid,  ivs = c("leftright_self", "q74d_recode"), dv = "Fav_AfD", addConstant = TRUE)
jags_data.postCor$B_mean <- jags_summary.preLin$statistics[,"Mean"]
jags_data.postCor$B_var <- 1 /  (var(jags_dfout.preLin) * 1.5) #The precision matrix isn't positive definite, so we need to use the nearPD function to generat an approximate one
PDMatrix <- Matrix::nearPD(1 /(var(jags_dfout.preLin) * 1.5), keepDiag = TRUE, maxit = 50000)$mat
jags_data.postCor$B_var <- as.matrix(PDMatrix)
jags_data.postCor$J <- NULL #Since we define the distribution of variables via a multivariate normal rather than a for loop, we don't need J (the count of variables)
# #--Inspect intiial run--
jags_reg.postCor <- jags.model(file = "JAGS Models/lin_cor.bugs", data = jags_data.postCor, n.chains = 5)
jags_out.postCor <- coda.samples(model = jags_reg.postCor, variable.names = c("beta[1]", "beta[2]", "beta[3]"), n.iter = 5000)
plot(jags_out.postCor) #Convergence looks good, but Beta3 has a slightly lumpy distribution
gelman.plot(jags_out.postInd) #Shrinkage looks good after about 2000 iterations
autocorr.plot(jags_out.postInd, ask = FALSE) #Autocorrelation looks good
summary(jags_out.postCor) #B0: [-.15, +.73], B1: [.47, .60], B2: [-.29, -.06]
summary(jags_out.postInd) #B0: [-.13, +.70], B1: [.47, .60], B2: [-.29, -.06]
rm(list = ls())
library(foreign)
library(rstudioapi)
library(rjags)
setwd(dirname(dirname(getActiveDocumentContext()$path)))
preSurvey <- read.spss("Data/Pre-Election - Processed.sav", to.data.frame = TRUE)
postSurvey <- read.spss("Data/Post-Election - Processed.sav", to.data.frame = TRUE)
source("Scripts/makeJagsData.R")
load("3 - Linear Regression.RData")
##===1. Define data===
#Recoding
preSurvey$voteAfD_2017 <- as.numeric(preSurvey$voteAfD_2017) - 1
postSurvey$voteAfD_2017 <- as.numeric(postSurvey$voteAfD_2017) - 1
#Define data
validcases.pre <- !is.na(preSurvey$leftright_self) & !is.na(preSurvey$q55d_recode)
preSurvey.valid <- preSurvey[validcases.pre,]
validcases.post <- !is.na(postSurvey$leftright_self) & !is.na(postSurvey$q74d_recode)
postSurvey.valid <- postSurvey[validcases.post,]
#Define models
jags_data.preLin <- makeJagsData(df = preSurvey.valid,  ivs = c("leftright_self", "q55d_recode"), dv = "Fav_AfD", addConstant = TRUE)
#Define priors for beta, via a matrix
jags_data.preLin$B_mean <- c(2.5, 0.0, 0.0)
jags_data.preLin$B_var <- diag(3) * c(0.2, 0.2, 0.2)
##===2. Pre-Election survey (linear)===
#We'll run a regression on the pre-election survey, setting an uninformative prior
#Then use this to set the prior for post-election
jags_data.preLin$J <- NULL
jags_reg.preLin <- jags.model(file = "JAGS Models/lin_cor.bugs", data = jags_data.preLin, n.chains = 5)
jags_out.preLin <- coda.samples(model = jags_reg.preLin, variable.names = c("beta[1]", "beta[2]", "beta[3]"), n.iter = 200)
#--Inspect for convergence and autocorrelation--
plot(jags_out.preLin) #appears to converge after around 100 iterations
gelman.plot(jags_out.preLin) #shrink factor is bad until about 150, and stuck at around 1.1 even after that
autocorr.plot(jags_out.preLin, ask = FALSE) #autocorrelation seems substantial
#--Run and assess adjusted model
jags_out.preLin <- coda.samples(model = jags_reg.preLin, variable.names = c("beta[1]", "beta[2]", "beta[3]"), n.iter = 10000, thin = 25)
plot(jags_out.preLin) #looks good
gelman.plot(jags_out.preLin) #looks good
autocorr.plot(jags_out.preLin, ask = FALSE) #Looks pretty good, one minor instance that might indicate autocorrelation in B0
jags_summary.preLin <- summary(jags_out.preLin)
jags_summary.preLin
#Mean B1 = .35, B2 = .29, B0 = -.14
#95th quantiles  .29 to .36 for B1, .21 to .28 for B2, -.56 to +.27 for B0
#So we can say with a fairly high probabiliy that B1 has a larger effect than B2, depending on covariance
#Beta1 and Beta2 are negatively correlated at about -.05
#This is a weak enough correlation that B1 is probably > B2, but would want to quantify the probability of this
jags_dfout.preLin <-  do.call("rbind", jags_out.preLin)
cor(jags_dfout.preLin)
##===3. Post-Election survey (linear, independent priors)===
#The assumption here is that there is no covariance between B0, B1, and B2
#--Define data--
#Note that q55 in the presurvey = q74 in the postsurvey
jags_data.postInd <- makeJagsData(df = postSurvey.valid,  ivs = c("leftright_self", "q74d_recode"), dv = "Fav_AfD", addConstant = TRUE)
jags_data.postInd$J <- NULL
#--Define priors for beta, via a matrix--
jags_data.postInd$B_mean <- jags_summary.preLin$statistics[,"Mean"]
jags_data.postInd$B_var <- diag(3) * (1 / (jags_summary.preLin$statistics[,"SD"] ^ 2) * 1.5)
#--Initial run--
jags_reg.postInd <- jags.model(file = "JAGS Models/lin_cor.bugs", data = jags_data.postInd, n.chains = 5)
jags_out.postInd <- coda.samples(model = jags_reg.postInd, variable.names = c("beta[1]", "beta[2]", "beta[3]"), n.iter = 5000)
plot(jags_out.postInd)
autocorr.plot(jags_out.postInd, ask = FALSE) #as expected, continuing autocorrelation; 25 lags look like it should solve things, but we can be conservative
gelman.plot(jags_out.postInd) #shrunken after about 1000 iterations
#--Subsequent run--
jags_out.postInd <- coda.samples(model = jags_reg.postInd, variable.names = c("beta[1]", "beta[2]", "beta[3]"), n.iter = 50000, thin = 20)
plot(jags_out.postInd) #iterations seem pretty well-mixed, but there's a weird lumpy bit in the B1 and B2 distributions
autocorr.plot(jags_out.postInd, ask = FALSE) #autocorrelation looks okay
gelman.plot(jags_out.postInd) #shrinkage factor is good
jags_summary.postInd <- summary(jags_out.postInd)
jags_summary.postInd
jags_summary.preLin
#the size of Beta1 differs drastically, from mean .28 in the pre to mean .42 in the post
#this seems to warrant further investigation
##===4. Post-Election survey (linear, correlated priors)===
#--Define data and model--
jags_data.postCor <- makeJagsData(df = postSurvey.valid,  ivs = c("leftright_self", "q74d_recode"), dv = "Fav_AfD", addConstant = TRUE)
jags_data.postCor$B_mean <- jags_summary.preLin$statistics[,"Mean"]
jags_data.postCor$B_var <- 1 /  (var(jags_dfout.preLin) * 1.5) #The precision matrix isn't positive definite, so we need to use the nearPD function to generat an approximate one
PDMatrix <- Matrix::nearPD(1 /(var(jags_dfout.preLin) * 1.5), keepDiag = TRUE, maxit = 50000)$mat
jags_data.postCor$B_var <- as.matrix(PDMatrix)
jags_data.postCor$J <- NULL #Since we define the distribution of variables via a multivariate normal rather than a for loop, we don't need J (the count of variables)
# #--Inspect intiial run--
jags_reg.postCor <- jags.model(file = "JAGS Models/lin_cor.bugs", data = jags_data.postCor, n.chains = 5)
jags_out.postCor <- coda.samples(model = jags_reg.postCor, variable.names = c("beta[1]", "beta[2]", "beta[3]"), n.iter = 5000)
plot(jags_out.postCor) #Convergence looks good, but Beta3 has a slightly lumpy distribution
gelman.plot(jags_out.postInd) #Shrinkage looks good after about 2000 iterations
autocorr.plot(jags_out.postInd, ask = FALSE) #Autocorrelation looks good
# #--Final run--
summary(jags_out.postCor) #B0: [-.40, +.26], B1: [.38, .48], B2: [.14, .27]
summary(jags_out.postInd) #B0: [-.24, +.04], B1: [.38, .46], B2: [.16, -.26]
save.image("3 - Linear Regression.RData")
rm(list = ls())
library(foreign)
library(rstudioapi)
library(rjags)
setwd(dirname(dirname(getActiveDocumentContext()$path)))
preSurvey <- read.spss("Data/Pre-Election - Processed.sav", to.data.frame = TRUE)
postSurvey <- read.spss("Data/Post-Election - Processed.sav", to.data.frame = TRUE)
source("Scripts/makeJagsData.R")
##===1. Define data===
#Recoding
preSurvey$voteAfD_2017 <- as.numeric(preSurvey$voteAfD_2017) - 1
postSurvey$voteAfD_2017 <- as.numeric(postSurvey$voteAfD_2017) - 1
#Define data
validcases.preBin <- !is.na(preSurvey$Fav_AfD) & !is.na(preSurvey$q55d_recode)
preSurvey.validBin <- preSurvey[validcases.preBin,]
validcases.postBin <- !is.na(postSurvey$Fav_AfD) & !is.na(postSurvey$q74d_recode)
postSurvey.validBin <- postSurvey[validcases.postBin,]
#Define models
jags_data.preBin <- makeJagsData(df = preSurvey.validBin , ivs = c("Fav_AfD", "q55d_recode"), dv = "voteAfD_2017", addConstant = FALSE)
jags_data.postBin <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin$J <- NULL
#Define priors for beta, via a matrix
jags_data.preBin$B_mean <- c(0.0, 0.0, 0.0)
jags_data.preBin$B_var <- diag(3) * c(0.1, 0.1, 0.1)
##===2. Pre-Election survey (binomial, independent priors)===
#--Initial run--
jags_reg.preBin <- jags.model(file = "JAGS Models/bin.cc.bugs", data = jags_data.preBin,
n.chains = 3)
jags_out.preBin <-  coda.samples(model = jags_reg.preBin, variable.names = c("Beta0", "Beta[1]", "Beta[2]"), n.iter = 5000)
plot(jags_out.preBin) #looks generally converged, but a bit lumpy
gelman.plot(jags_out.preBin) #seems good after about 3000 iterations
autocorr.plot(jags_out.preBin) #strong autocorrelation
update(jags_reg.preBin, 3000)
jags_out.preBin <-  coda.samples(model = jags_reg.preBin, variable.names = c("Beta0", "Beta[1]", "Beta[2]"), n.iter = 75000, thin = 50)
plot(jags_out.preBin) #still slightly lumpy
gelman.plot(jags_out.preBin) #good
autocorr.plot(jags_out.preBin) #some first-lag autocorrelation, but not too bad
jags_summary.preBin <- summary(jags_out.preBin)
jags_summary.preBin #B0: [-10.14, -7.35], B1: [0.83, 1.14], B2: [-0.08, 0.24]
jags_dfout.preBin <-  do.call("rbind", jags_out.preBin)
var(jags_dfout.preBin)
save.image("5 - Binomial Regression.RData")
jags_data.postBin$B_mean <- jags_summary.preBin$statistics[,"Mean"]
jags_data.postBin$B_var <- diag(3) * (1 / (jags_summary.preBin$statistics[,"SD"] ^ 2) * 1.5)
jags_reg.postBin <- jags.model(file = "JAGS Models/bin_cor.bugs", data = jags_data.postBin, n.chains = 3)
jags_out.postBin <- coda.samples(model = jags_reg.postBin, variable.names = c("beta[1]", "beta[2]", "beta[3]"), n.iter = 5000)
plot(jags_out.postBin)
gelman.plot(jags_out.postBin)
autocorr.plot(jags_out.postBin, ask = FALSE)
update(jags_out.postBin, 2000)
save.image("5 - Binomial Regression.RData")
jags_out.postBin <- coda.samples(model = jags_reg.postBin, variable.names = c("beta[1]", "beta[2]", "beta[3]"), n.iter = 100000, thin = 10)
save.image("5 - Binomial Regression.RData")
plot(jags_out.postBin)
autocorr.plot(jags_out.postBin)
summary(jags_out.postBin)
str(summary(jags_out.postBin))
jags_summary.postBin <- summary(jags_out.postBin)
jag_summary.postBin$statistics
jags_summary.postBin$statistics
jags_summary.postBin$statistics[,"Naive SE"]
jags_summary.postBin$statistics[,"Naive SE"] / jags_summary.postBin$statistics[,"Time-series SE"]
gelman.plot(jags_out.postBin)
jags_sumary.postBin
jags_summary.postBin
jags_summary.preBin
jags_data.postBin_cor$B_mean <- jags_summary.preBin$statistics[,"Mean"]
jags_data.postBin_cor$B_var <- (1 / ((jags_summary.preBin$statistics[,"SD"] ^ 2) * 1.5))
jags_data.postBin_cor <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin_cor$J <- NULL
##===4. Post-Election survey (binomial, correlated priors)===
#--Define priors--
jags_data.postBin_cor$B_mean <- jags_summary.preBin$statistics[,"Mean"]
jags_data.postBin_cor$B_var <- (1 / ((jags_summary.preBin$statistics[,"SD"] ^ 2) * 1.5))
jags_reg.postBin_cor <- jags.model(file = "JAGS Models/bin_cor.bugs", data = jags_data.postBin_cor, n.chains = 3)
jags_data.postBin$B_var
jags_data.postBin_cor$B_var
var(jags_dfout.preBin)
jags_summary.preBin$statistics[,"SD"]
1 /  (var(jags_dfout.preLin) * 1.5)
1 /  (var(jags_dfout.preBin) * 1.5)
jags_data.postCor$B_var <- 1 /  (var(jags_dfout.preBin) * 1.5) #The precision matrix isn't positive definite, so we need to use the nearPD function to generat an approximate one
jags_data.postBin_cor$B_var <- 1 /  (var(jags_dfout.preBin) * 1.5) #The precision matrix isn't positive definite, so we need to use the nearPD function to generat an approximate one
jags_reg.postBin_cor <- jags.model(file = "JAGS Models/bin_cor.bugs", data = jags_data.postBin_cor, n.chains = 3)
PDMatrix <- Matrix::nearPD(1 /(var(jags_dfout.preBin) * 1.5), keepDiag = TRUE, maxit = 50000)$mat
PDMatrix
1 /  (var(jags_dfout.preBin) * 1.5)
jags_data.postBin_cor$B_var <- as.matri(PDMatrix)
jags_data.postBin_cor$B_mean <- jags_summary.preBin$statistics[,"Mean"]
jags_data.postBin_cor$B_var <- 1 /  (var(jags_dfout.preBin) * 1.5) #The precision matrix isn't positive definite, so we need to use the nearPD function to generat an approximate one
PDMatrix <- Matrix::nearPD(1 /(var(jags_dfout.preBin) * 1.5), keepDiag = TRUE, maxit = 50000)$mat
jags_data.postBin_cor$B_var <- as.matrix(PDMatrix)
#--Initial run--
jags_reg.postBin_cor <- jags.model(file = "JAGS Models/bin_cor.bugs", data = jags_data.postBin_cor, n.chains = 3) #Error: invalid parent values
jags_out.postBin_cor <- coda.samples(model = jags_reg.postBin_cor, variable.names = c("beta[1]", "beta[2]", "beta[3]"), n.iter = 5000)
plot(jags_out.postBin_cor) #B0 and B1 don't seem well-mixed
gelman.plot(jags_out.postBin_cor) #issues with 1st 1500 iterations only
autocorr.plot(jags_out.postBin_cor, ask = FALSE) #beta2 is stable, but series autocorrelation in b0 and b1
par(mfrow = c(3,2))
autocorr.plot(jags_out.postBin_cor, ask = FALSE) #beta2 is stable, but series autocorrelation in b0 and b1
jags_out.postBin_cor <- coda.samples(model = jags_reg.postBin_cor, variable.names = c("beta[1]", "beta[2]", "beta[3]"), n.iter = 100000, thin = 10)
save.image("5 - Binomial Regression.RData")
plot(jags_out.postBin_cor)
10^5
10000
10000 - 10^5
10000 - 10^4
gelman.plot(jags_out.postBin_cor)
autocorr.plot(jags_out.postBin_cor)
rm(list = ls())
library(foreign)
library(rstudioapi)
library(rjags)
setwd(dirname(dirname(getActiveDocumentContext()$path)))
preSurvey <- read.spss("Data/Pre-Election - Processed.sav", to.data.frame = TRUE)
postSurvey <- read.spss("Data/Post-Election - Processed.sav", to.data.frame = TRUE)
source("Scripts/makeJagsData.R")
load("3 - Linear Regression.RData")
jags_data.postBlank <- makeJagsData(df = postSurvey.valid,  ivs = c("leftright_self", "q74d_recode"), dv = "Fav_AfD", addConstant = TRUE)
jags_data.postBlank$J <- NULL
jags_data.postBlank$B_mean <- c(0.0, 0.0, 0.0)
jags_data.postBlank$B_var <- diag(3) * c(0.01, 0.01, 0.01)
jags_reg.postBlank <- jags.model(file = "JAGS Models/lin_cor.bugs", data = jags_data.postBlank, n.chains = 5)
jags_out.postBlank <- coda.samples(model = jags_reg.postBlank, variable.names = c("beta[1]", "beta[2]", "beta[3]"), n.iter = 5000)
plot(jags_out.postInd)
autocorr.plot(jags_out.postInd, ask = FALSE) #as expected, continuing autocorrelation; 25 lags look like it should solve things, but we can be conservative
gelman.plot(jags_out.postInd) #looks good
jags_reg.postBlank <- jags.model(file = "JAGS Models/lin_cor.bugs", data = jags_data.postBlank, n.chains = 5)
jags_out.postBlank <- coda.samples(model = jags_reg.postBlank, variable.names = c("beta[1]", "beta[2]", "beta[3]"), n.iter = 5000)
plot(jags_out.postInd)
autocorr.plot(jags_out.postInd, ask = FALSE) #looks good
gelman.plot(jags_out.postInd) #looks good
jags_summary.postBlank <- summary(jags_out.postBlank)
summary(jags_out.postBlank)
summary(jags_out.preLin)
save.image("3 - Linear Regression.RData")
jags_summary.preBin$statistics
c(.01, .01, .01)
diag(3) * c(.01, .01, .01)
jags_data.postBin_blank$B_mean <- jags_summary.preBin$statistics[,"Mean"]
jags_data.postBin_blank$B_var <- diag(3) * c(.01, .01, .01)
#--Initial run--
jags_reg.postBin_blank <- jags.model(file = "JAGS Models/bin_cor.bugs", data = jags_data.postBin_blank, n.chains = 3)
jags_data.postBin_blank <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin_blank$J <- NULL
jags_data.postBin_blank <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin_blank$J <- NULL
jags_data.postBin_blank$B_mean <- c(0, 0, 0)
jags_data.postBin_blank <- diag(3) * c(0.01, 0.01, 0.01)
rm(list = ls())
library(foreign)
library(rstudioapi)
library(rjags)
setwd(dirname(dirname(getActiveDocumentContext()$path)))
preSurvey <- read.spss("Data/Pre-Election - Processed.sav", to.data.frame = TRUE)
postSurvey <- read.spss("Data/Post-Election - Processed.sav", to.data.frame = TRUE)
source("Scripts/makeJagsData.R")
##===1. Define data===
#Recoding
preSurvey$voteAfD_2017 <- as.numeric(preSurvey$voteAfD_2017) - 1
postSurvey$voteAfD_2017 <- as.numeric(postSurvey$voteAfD_2017) - 1
#Define data
validcases.preBin <- !is.na(preSurvey$Fav_AfD) & !is.na(preSurvey$q55d_recode)
preSurvey.validBin <- preSurvey[validcases.preBin,]
validcases.postBin <- !is.na(postSurvey$Fav_AfD) & !is.na(postSurvey$q74d_recode)
postSurvey.validBin <- postSurvey[validcases.postBin,]
#Define models
jags_data.preBin <- makeJagsData(df = preSurvey.validBin , ivs = c("Fav_AfD", "q55d_recode"), dv = "voteAfD_2017", addConstant = FALSE)
jags_data.postBin <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin$J <- NULL
jags_data.postBin_cor <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin_cor$J <- NULL
jags_data.postBin_blank <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin_blank$J <- NULL
#Define priors for beta, via a matrix
jags_data.preBin$B_mean <- c(0.0, 0.0, 0.0)
jags_data.preBin$B_var <- diag(3) * c(0.1, 0.1, 0.1)
##===2. Pre-Election survey (binomial, independent priors)===
#--Initial run--
jags_reg.preBin <- jags.model(file = "JAGS Models/bin.cc.bugs", data = jags_data.preBin,
n.chains = 3)
jags_out.preBin <-  coda.samples(model = jags_reg.preBin, variable.names = c("Beta0", "Beta[1]", "Beta[2]"), n.iter = 5000)
plot(jags_out.preBin) #looks generally converged, but a bit lumpy
gelman.plot(jags_out.preBin) #seems good after about 3000 iterations
autocorr.plot(jags_out.preBin) #strong autocorrelation
update(jags_reg.preBin, 3000)
jags_out.preBin <-  coda.samples(model = jags_reg.preBin, variable.names = c("Beta0", "Beta[1]", "Beta[2]"), n.iter = 75000, thin = 50)
rm(list = ls())
library(foreign)
library(rstudioapi)
library(rjags)
setwd(dirname(dirname(getActiveDocumentContext()$path)))
preSurvey <- read.spss("Data/Pre-Election - Processed.sav", to.data.frame = TRUE)
postSurvey <- read.spss("Data/Post-Election - Processed.sav", to.data.frame = TRUE)
source("Scripts/makeJagsData.R")
load("5 - Binomial Regression.RData")
##===1. Define data===
#Recoding
preSurvey$voteAfD_2017 <- as.numeric(preSurvey$voteAfD_2017) - 1
postSurvey$voteAfD_2017 <- as.numeric(postSurvey$voteAfD_2017) - 1
#Define data
validcases.preBin <- !is.na(preSurvey$Fav_AfD) & !is.na(preSurvey$q55d_recode)
preSurvey.validBin <- preSurvey[validcases.preBin,]
validcases.postBin <- !is.na(postSurvey$Fav_AfD) & !is.na(postSurvey$q74d_recode)
postSurvey.validBin <- postSurvey[validcases.postBin,]
#Define models
jags_data.preBin <- makeJagsData(df = preSurvey.validBin , ivs = c("Fav_AfD", "q55d_recode"), dv = "voteAfD_2017", addConstant = FALSE)
jags_data.postBin <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin$J <- NULL
jags_data.postBin_cor <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin_cor$J <- NULL
jags_data.postBin_blank <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin_blank$J <- NULL
#Define priors for beta, via a matrix
jags_data.preBin$B_mean <- c(0.0, 0.0, 0.0)
jags_data.preBin$B_var <- diag(3) * c(0.1, 0.1, 0.1)
#--Define priors--
jags_data.postBin_blank$B_mean <- c(0, 0, 0)
jags_data.postBin_blank <- diag(3) * c(0.01, 0.01, 0.01)
jags_reg.postBin_blank <- jags.model(file = "JAGS Models/bin_cor.bugs", data = jags_data.postBin_blank, n.chains = 3)
jags_data.postBin_blank
rm(list = ls())
library(foreign)
library(rstudioapi)
library(rjags)
setwd(dirname(dirname(getActiveDocumentContext()$path)))
preSurvey <- read.spss("Data/Pre-Election - Processed.sav", to.data.frame = TRUE)
postSurvey <- read.spss("Data/Post-Election - Processed.sav", to.data.frame = TRUE)
source("Scripts/makeJagsData.R")
load("5 - Binomial Regression.RData")
##===1. Define data===
#Recoding
preSurvey$voteAfD_2017 <- as.numeric(preSurvey$voteAfD_2017) - 1
postSurvey$voteAfD_2017 <- as.numeric(postSurvey$voteAfD_2017) - 1
#Define data
validcases.preBin <- !is.na(preSurvey$Fav_AfD) & !is.na(preSurvey$q55d_recode)
preSurvey.validBin <- preSurvey[validcases.preBin,]
validcases.postBin <- !is.na(postSurvey$Fav_AfD) & !is.na(postSurvey$q74d_recode)
postSurvey.validBin <- postSurvey[validcases.postBin,]
#Define models
jags_data.preBin <- makeJagsData(df = preSurvey.validBin , ivs = c("Fav_AfD", "q55d_recode"), dv = "voteAfD_2017", addConstant = FALSE)
jags_data.postBin <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin$J <- NULL
jags_data.postBin_cor <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin_cor$J <- NULL
jags_data.postBin_blank <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin_blank$J <- NULL
jags_data.postBin_blank
jags_data.postBin_blank$B_mean <- c(0, 0, 0)
jags_data.postBin_blank$B_mean <- c(0, 0, 0)
jags_data.postBin_blank$B_var <- diag(3) * c(0.01, 0.01, 0.01)
jags_reg.postBin_blank <- jags.model(file = "JAGS Models/bin_cor.bugs", data = jags_data.postBin_blank, n.chains = 3)
jags_data.postBin_blank$B_mean <- c(0, 0, 0)
jags_data.postBin_blank$B_var <- diag(3) * c(0.01, 0.01, 0.01)
rm(list = ls())
library(foreign)
library(rstudioapi)
library(rjags)
setwd(dirname(dirname(getActiveDocumentContext()$path)))
preSurvey <- read.spss("Data/Pre-Election - Processed.sav", to.data.frame = TRUE)
postSurvey <- read.spss("Data/Post-Election - Processed.sav", to.data.frame = TRUE)
source("Scripts/makeJagsData.R")
load("5 - Binomial Regression.RData")
##===1. Define data===
#Recoding
preSurvey$voteAfD_2017 <- as.numeric(preSurvey$voteAfD_2017) - 1
postSurvey$voteAfD_2017 <- as.numeric(postSurvey$voteAfD_2017) - 1
#Define data
validcases.preBin <- !is.na(preSurvey$Fav_AfD) & !is.na(preSurvey$q55d_recode)
preSurvey.validBin <- preSurvey[validcases.preBin,]
validcases.postBin <- !is.na(postSurvey$Fav_AfD) & !is.na(postSurvey$q74d_recode)
postSurvey.validBin <- postSurvey[validcases.postBin,]
#Define models
jags_data.preBin <- makeJagsData(df = preSurvey.validBin , ivs = c("Fav_AfD", "q55d_recode"), dv = "voteAfD_2017", addConstant = FALSE)
jags_data.postBin <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin$J <- NULL
jags_data.postBin_cor <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin_cor$J <- NULL
jags_data.postBin_blank <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin_blank$J <- NULL
jags_data.postBin_blank$y
#--Define priors--
jags_data.postBin_blank$B_mean <- c(0, 0, 0)
jags_data.postBin_blank$B_var <- diag(3) * c(0.01, 0.01, 0.01)
#--Initial run--
jags_reg.postBin_blank <- jags.model(file = "JAGS Models/bin_cor.bugs", data = jags_data.postBin_blank, n.chains = 3)
jags_data.postBin$B_mean <- jags_summary.preBin$statistics[,"Mean"]
jags_data.postBin$B_var <- diag(3) * (1 / ((jags_summary.preBin$statistics[,"SD"] ^ 2) * 1.5))
#--Initial run--
jags_reg.postBin <- jags.model(file = "JAGS Models/bin_cor.bugs", data = jags_data.postBin, n.chains = 3)
jags_data.postBin$y[1]
preSurvey <- read.spss("Data/Pre-Election - Processed.sav", to.data.frame = TRUE)
postSurvey <- read.spss("Data/Post-Election - Processed.sav", to.data.frame = TRUE)
preSurvey$voteAfD_2017 <- as.numeric(preSurvey$voteAfD_2017) - 1
postSurvey$voteAfD_2017 <- as.numeric(postSurvey$voteAfD_2017) - 1
rm(list = ls())
library(foreign)
library(rstudioapi)
library(rjags)
setwd(dirname(dirname(getActiveDocumentContext()$path)))
preSurvey <- read.spss("Data/Pre-Election - Processed.sav", to.data.frame = TRUE)
postSurvey <- read.spss("Data/Post-Election - Processed.sav", to.data.frame = TRUE)
source("Scripts/makeJagsData.R")
##===1. Define data===
#Recoding
preSurvey$voteAfD_2017 <- as.numeric(preSurvey$voteAfD_2017) - 1
postSurvey$voteAfD_2017 <- as.numeric(postSurvey$voteAfD_2017) - 1
#Define data
validcases.preBin <- !is.na(preSurvey$Fav_AfD) & !is.na(preSurvey$q55d_recode)
preSurvey.validBin <- preSurvey[validcases.preBin,]
validcases.postBin <- !is.na(postSurvey$Fav_AfD) & !is.na(postSurvey$q74d_recode)
postSurvey.validBin <- postSurvey[validcases.postBin,]
#Define models
jags_data.preBin <- makeJagsData(df = preSurvey.validBin , ivs = c("Fav_AfD", "q55d_recode"), dv = "voteAfD_2017", addConstant = FALSE)
jags_data.postBin <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin$J <- NULL
jags_data.postBin_cor <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin_cor$J <- NULL
jags_data.postBin_blank <- makeJagsData(df = postSurvey.validBin, ivs = c("Fav_AfD", "q74d_recode"), dv = "voteAfD_2017", addConstant = TRUE)
jags_data.postBin_blank$J <- NULL
load("5 - Binomial Regression.RData")
jags_data.postBin$B_mean <- jags_summary.preBin$statistics[,"Mean"]
jags_data.postBin$B_var <- diag(3) * (1 / ((jags_summary.preBin$statistics[,"SD"] ^ 2) * 1.5))
#--Initial run--
jags_reg.postBin <- jags.model(file = "JAGS Models/bin_cor.bugs", data = jags_data.postBin, n.chains = 3)
jags_data.postBin_blank$B_mean <- c(0, 0, 0)
jags_data.postBin_blank$B_var <- diag(3) * c(0.01, 0.01, 0.01)
#--Initial run--
jags_reg.postBin_blank <- jags.model(file = "JAGS Models/bin_cor.bugs", data = jags_data.postBin_blank, n.chains = 3)
jags_out.postBin_blank <- coda.samples(model = jags_reg.postBin_blank, variable.names = c("beta[1]", "beta[2]", "beta[3]"), n.iter = 5000)
plot(jags_out.postBin_blank) #B0 and B1 don't seem well-mixed
jags_out.postBin_blank <- coda.samples(model = jags_reg.postBin_blank, variable.names = c("beta[1]", "beta[2]", "beta[3]"), n.iter = 75000)
save.image("5 - Binomial Regression.RData")
plot(jags_out.postBin_blank)
